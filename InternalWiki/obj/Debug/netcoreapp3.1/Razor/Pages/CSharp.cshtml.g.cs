#pragma checksum "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\CSharp.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "119d688e6c2b58471d7fbd3c4e9fa243629c02e9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(InternalWiki.Pages.Pages_CSharp), @"mvc.1.0.razor-page", @"/Pages/CSharp.cshtml")]
namespace InternalWiki.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\_ViewImports.cshtml"
using InternalWiki;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"119d688e6c2b58471d7fbd3c4e9fa243629c02e9", @"/Pages/CSharp.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"79b23258dcb9c77ee4f6560083efbe2007a455bc", @"/Pages/_ViewImports.cshtml")]
    public class Pages_CSharp : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\CSharp.cshtml"
  ViewData["Title"] ="CSharp";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div id = ""title""> <h1> C# </h1> </div>
<div id = ""content""> <h2> Intro </h2>
<p>C# is a great language. It is like a Swiss army knife that can be used to solve any number of problems. It's an object oriented language but it isn't too obnoxious about it. You can barely think about that and focus more on creating the solution and then compress that into your classes later. It also contains many useful and powerful generic data structures. </p>
<p> If you'd like, it also has several options to code in a more functional style, as well as options to keep data immutable. </p>
<pre>
<code>
#using System;

int main(string[] args)
{
    Console.WriteLine(""Hello, World!"");
}
</code>
</pre>
<p> An example of hello world in C# </p> </div>

<button class = ""btn-secondary""> Modify </button><button class = ""btn-danger""> Delete </button><div id = ""tags""> C# Dotnet .net, </div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_CSharp> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_CSharp> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_CSharp>)PageContext?.ViewData;
        public Pages_CSharp Model => ViewData.Model;
    }
}
#pragma warning restore 1591

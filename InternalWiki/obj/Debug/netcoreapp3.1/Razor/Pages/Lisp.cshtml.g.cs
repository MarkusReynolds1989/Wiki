#pragma checksum "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\Lisp.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "61b11b280de2891c6553da87b0ba04b76d756906"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(InternalWiki.Pages.Pages_Lisp), @"mvc.1.0.razor-page", @"/Pages/Lisp.cshtml")]
namespace InternalWiki.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\_ViewImports.cshtml"
using InternalWiki;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"61b11b280de2891c6553da87b0ba04b76d756906", @"/Pages/Lisp.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"79b23258dcb9c77ee4f6560083efbe2007a455bc", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Lisp : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\MR071411\Desktop\FunCode\CSharp\Wiki\InternalWiki\InternalWiki\Pages\Lisp.cshtml"
  ViewData["Title"] = "Lisp";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div id=""title""> <h1> Lisp </h1> </div>
<div id=""content"">
    <p> Lisp is the type of language that is easy to learn but difficult to master. It's also quite hard to learn as a third or fourth language. It never become very popular but it inspired most of the high level languages we use today. </p>
    <p> Most popular languages marry C's syntax with Lisp's garbage collection, lambda functions, and list manipulation. Lynq in C# is example of such an implementation, as well as anonymous function abilities it's picked up over the years. </p>
    <p> One of the great things about lisp is that things that get parsed in the language are also data types called symbols. That means it's very easy to write a compiler in it as it naturally can read itself quite well </p>
    <p> I could write a hello-world example here but that would be quite boring, instead I'd like to write a simple function that adds 1 to a list of items </p>
<pre>
<code>
(setf items '(1 2 3 4))

(mapcar (lambda (x) (+ x 1)) items)

(2 ");
            WriteLiteral(@"3 4 5)
</code>
</pre>
    <p> You can actually open up a terminal, throw that info in there, and then watch it run through compilers like SBCL. Lisp, like Python, can run dynamically but it can also be compiled down to machine code. </p>
    <p> One further comment I'd like to make is that Lisp also has powerful meta-programming capacities called ""macros"" these tools can allow you to write code that writes code. </p>
</div>

<button class=""btn-secondary""> Modify </button><div id=""tags""> Lisp Functional, </div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Lisp> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Lisp> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Lisp>)PageContext?.ViewData;
        public Pages_Lisp Model => ViewData.Model;
    }
}
#pragma warning restore 1591

[
  {
    "Title": "C Lang",
    "Content": "<p> \r\nHere is the first page of some information about the C language. I can't guarantee this will expand out at all , but, for now this is just the beginning and we can always program a way to move everything to the right spot later.\r\n</p>\r\n<pre>            \r\n<code class=\"language-c\">             \r\n/* A simple hello world program in C */             \r\n#include &lt;stdio.h&gt;             \r\n#include &lt;stdint.h&gt;            \r\n int32_t main() {                \r\n     printf(\"Hello, World!\\n\");               \r\n     return 0;           \r\n }    \r\n</code>\r\n</pre>\r\n<samp>Output: Hello,World!</samp>\r\n<br>\r\n<br>\r\n<p> \r\nA simple hello world program\r\n</p>\r\n<p>    C is a great and simple language. It's lighting fast to compile, and allows you to do almost anything    you want in it. That means it allows you to make as many mistakes as you want. I will write more about C in later pages. \r\n</p>\r\n",
    "Tags": "No",
    "PublishTime": "2020-06-11T08:46:02.7952702-05:00",
    "UpDateTime": "2020-06-11T10:13:16.4950892-05:00"
  },
  {
    "Title": "F#",
    "Content": "<p>\r\n    F# is a great language for functional programming.\r\n    It combines functional programming concepts with terse readable syntax.\r\n    Here's a very simple hello world function in F#\r\n</p>\r\n\r\n\r\n<pre>\r\n<code>\r\n printfn \"Hello World!\"\r\n</code>\r\n</pre>\r\n<samp>Output: Hello World!</samp>\r\n\r\n<p>\r\n    Of course, this is much too simple, we need a much more interesting example. Something F# excels in is\r\n    recursion, here's an example of a recursive function:\r\n<pre>\r\n<code class=\"language-F#\">\r\n//Get the count of the list.\r\nlet rec getCount (list, count) =\r\n    match list with\r\n    | [] -> count\r\n    | _ -> getCount (list.Tail, count + 1)\r\n</code>\r\n</pre>\r\n<samp>\r\n    Consumes a list and returns the count of that list.\r\n</samp>\r\n</p>\r\n\r\n\r\n<p>\r\n    This function gets the count of a list you pass in. One thing to take notice of is the \"list.Tail\"\r\n    function which gives you the list minus the first element.\r\n</p>",
    "Tags": "",
    "PublishTime": "2020-06-11T08:46:35.360145-05:00",
    "UpDateTime": "2020-06-11T10:11:40.1372511-05:00"
  },
  {
    "Title": "Lisp",
    "Content": "<p>\r\n    Lisp is the type of language that is easy to learn but difficult to master. It's also quite hard to\r\n    learn as a third or fourth language. It never become very popular but it inspired most of the high\r\n    level languages we use today.\r\n</p>\r\n<p>\r\n    Most popular languages marry C's syntax with Lisp's garbage collection, lambda functions, and list\r\n    manipulation. Lynq in C# is example of such an implementation, as well as anonymous function abilities\r\n    it's picked up over the years.\r\n</p>\r\n<p>\r\n    One of the great things about lisp is that things that get parsed in the language are also data types\r\n    called symbols. That means it's very easy to write a compiler in it as it naturally can read itself\r\n    quite well\r\n</p>\r\n<p>\r\n    I could write a hello-world example here but that would be quite boring, instead I'd like to write a\r\n    simple function that adds 1 to a list of items\r\n</p>\r\n\r\n<pre>\r\n<code class=\"language-lisp\">\r\n(setf items '(1 2 3 4))\r\n\r\n(mapcar (lambda (x) (+ x 1)) items)\r\n\r\n(2 3 4 5)\r\n</code>\r\n</pre>\r\n<p> \r\n    You can actually open up a terminal, throw that info in there, and then watch it run through compilers\r\n    like SBCL. Lisp, like Python, can run dynamically but it can also be compiled down to machine\r\n    code. \r\n</p>\r\n<p> \r\n    One further comment I'd like to make is that Lisp also has powerful meta-programming capacities called\r\n    \"macros\" these tools can allow you to write code that writes code. \r\n</p>",
    "Tags": "",
    "PublishTime": "2020-06-11T08:47:29.579668-05:00",
    "UpDateTime": "2020-06-11T10:11:40.1372818-05:00"
  },
  {
    "Title": "Typescript and Javascript",
    "Content": "<p>\r\n    Where to even start with this? These scripting languages can be said to be rough around the edges at best.\r\n    I have so many stories of working on some script for a client or in college where a weird error was\r\n    happening but the interpreter just rolled with the punches and didn't try to stop for the error.\r\n</p>\r\n<p>\r\n    When I started this project I was using javascript/typescript for the front end stuff. But in the end I\r\n    realized that this was terrible, there are too many instances where it can fail and you don't actually\r\n    need it.\r\n</p>\r\n<p>\r\n    Here is the original ModifyArticle class I had implemented in typescript so I could modify an article:\r\n</p>\r\n\r\n<pre>\r\n<code class=\"language-typescript\">\r\nclass ModifyArticle {\r\n    readonly titleID: string;\r\n    readonly contentID: string;\r\n    readonly buttonsID: string;\r\n    readonly tagsID: string;\r\n    //Where to the put the editor.\r\n    readonly editorID: string;\r\n\r\n    constructor(tiID: string\r\n        , conID: string\r\n        , butID: string\r\n        , tagID: string\r\n        , ediID: string) {\r\n        this.titleID = tiID;\r\n        this.contentID = conID;\r\n        this.buttonsID = butID;\r\n        this.tagsID = tagID;\r\n        this.editorID = ediID;\r\n    }\r\n\r\n    public EditArticle(): void {\r\n        this.HideTags()\r\n        this.InsertEditor();\r\n    }\r\n\r\n    //Hide all the original elements on the page so we can write over them.\r\n    private HideTags(): void {\r\n        let title: HTMLElement = document.getElementById(this.titleID);\r\n        let content: HTMLElement = document.getElementById(this.contentID);\r\n        let tags: HTMLElement = document.getElementById(this.tagsID);\r\n        let button: HTMLElement = document.getElementById(this.buttonsID);\r\n        title.style.display = \"none\";\r\n        content.style.display = \"none\";\r\n        tags.style.display = \"none\";\r\n        button.style.display = \"none\";\r\n    }\r\n\r\n    //Insert HTML to represent editor and add the get strings to them.\r\n    private InsertEditor(): void {\r\n        let title = this.GetTitle();\r\n        let content = this.GetContent();\r\n        let tags = this.GetTags();\r\n        document.getElementById(this.editorID).innerHTML =\r\n            // TODO: Find out why this is broken. Producing a 400 error. Client side problem.\r\n            //A long modify form here.\r\n    \r\n        let initContent: HTMLElement = document.getElementById(\"newContent\");\r\n        (initContent).value += content;\r\n    }\r\n\r\n    // Return the text of the title.\r\n    private GetTitle = (): string =>\r\n        document.getElementById(this.titleID).innerHTML;\r\n\r\n    // Return the text of the content.\r\n    private GetContent = (): string =>\r\n        document.getElementById(this.contentID).innerHTML;\r\n\r\n    private GetTags = (): string =>\r\n        document.getElementById(this.contentID).innerHTML;\r\n    }\r\n</code>\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n    So this class is absolutely huge and all it does is modify the DOM. Many would say I should use a\r\n    framework to do this, but I don't have time to learn frameworks. So the solution here, for me at least, is\r\n    to not use Javascript except when I really need client side functionality, like in my modify box where I\r\n    need to implement a button action. I will not use it for modifying html at all.\r\n</p>\r\n<p>\r\n    Why would I abandon modifying the DOM? Well, the problem is that javascript and typescript don't emit\r\n    errors, as I said above. If I were programming in C# or C or pretty much any other language I would get a\r\n    compiler error and it would tell me what I was doing wrong, or at least a close hint. This was my same\r\n    issue with PHP. I need the compilers help to get better and to catch weird mistakes I make.\r\n</p>\r\n<p>\r\n    Typescript is much better than Javascript but you have to run a transpiler and there's still room for\r\n    error. The best bet is to just not use it unless you absolutely have to, hopefully webassembly will fix\r\n    most of these issues and I can just write my front end in C#.\r\n</p>",
    "Tags": "",
    "PublishTime": "2020-06-11T08:48:00.0093111-05:00",
    "UpDateTime": "2020-06-11T10:11:40.1373235-05:00"
  }
]